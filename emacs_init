;---------------------------;
;;; Packages Installation ;;;
;---------------------------;

;; MELPA packages
(require 'package)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar myPackages
  '(better-defaults
	elpy
	flycheck
        material-theme
	zenburn-theme
	py-autopep8))

(mapc #'(lambda (package)
    (unless (package-installed-p package)
      (package-install package)))
      myPackages)

;---------------------------;
;;; General Customization ;;;
;---------------------------;

;; highlight after 80th character
(setq-default
 whitespace-line-column 80
 whitespace-style       '(face lines-tail))
(add-hook 'prog-mode-hook #'whitespace-mode)

;; (setq inhibit-startup-message t) ;; hide the startup message

;;(load-theme 'material t) ;; load material theme
(load-theme 'zenburn t) ;; load zenburn

(ido-mode t) ;; interactive completion etc.
(global-linum-mode t) ;; enable line numbers globally

;; Fast buffer changes using s (super/windows)
(global-set-key [s-left] 'windmove-left)
(global-set-key [s-right] 'windmove-right)
(global-set-key [s-up] 'windmove-up) 
(global-set-key [s-down] 'windmove-down)

;; tab identation
(setq-default tab-width 8)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'c++-basic-offset 'tab-width)

;; rename file and buffer
(load "~/.emacs.d/rename_fb")

;-------;
;;; C ;;;
;-------;

(defun c-lineup-arglist-tabs-only (ignored)
   "Line up argument lists by tabs, not spaces"
   (let* ((anchor (c-langelem-pos c-syntactic-element))
          (column (c-langelem-2nd-pos c-syntactic-element))
          (offset (- (1+ column) anchor))
          (steps (floor offset c-basic-offset)))
     (* (max steps 1)
        c-basic-offset)))

(add-hook 'c-mode-common-hook
          (lambda ()
            ;; Add kernel style
            (c-add-style
             "linux-tabs-only"
             '("linux" (c-offsets-alist
                        (arglist-cont-nonempty
                         c-lineup-gcc-asm-reg
                         c-lineup-arglist-tabs-only))))))

(add-hook 'c-mode-hook
          (lambda ()
            (let ((filename (buffer-file-name)))
              ;; Enable kernel mode for the appropriate files
              (when (and filename
                         (string-match (expand-file-name "~/src/linux-trees")
                                       filename))
                (setq indent-tabs-mode t)
                (setq show-trailing-whitespace t)
                (c-set-style "linux-tabs-only")))))

;---------;
;;; C++ ;;;
;---------;

(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(add-hook 'irony-mode-hook 'company-mode)
(add-hook 'irony-mode-hook
          (lambda () (local-set-key (kbd "C-c C-d")
                                    (lambda ()
                                      (interactive)
                                      (man (current-word))
                                    )
                     )
	  )
)
(add-hook 'irony-mode-hook 'flycheck-mode)

;------------;
;;; PYTHON ;;;
;------------;

;; elpy
(elpy-enable)
(elpy-use-ipython)
;; workaround for ipython v5
(setq python-shell-interpreter "ipython"
    python-shell-interpreter-args "--simple-prompt --pprint")

;; flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; autopep8
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
